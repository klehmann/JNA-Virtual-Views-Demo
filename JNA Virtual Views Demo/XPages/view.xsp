<?xml version="1.0" encoding="UTF-8"?>
<xp:view xmlns:xp="http://www.ibm.com/xsp/core">
	<xp:this.resources>
		<xp:headTag tagName="link">
			<xp:this.attributes>
				<xp:parameter name="href"
					value="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" />
				<xp:parameter name="rel" value="stylesheet" />
			</xp:this.attributes>
		</xp:headTag>
		<xp:headTag tagName="link">
			<xp:this.attributes>
				<xp:parameter name="href"
					value="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
				<xp:parameter name="rel" value="stylesheet" />
			</xp:this.attributes>
		</xp:headTag>
		<xp:headTag tagName="script">
			<xp:this.attributes>
				<xp:parameter name="src"
					value="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" />
			</xp:this.attributes>
		</xp:headTag>
		<xp:headTag tagName="link">
			<xp:this.attributes>
				<xp:parameter name="href" value="categorizedview.css" />
			</xp:this.attributes>
			<xp:this.attributes>
				<xp:parameter name="rel" value="stylesheet" />
			</xp:this.attributes>
		</xp:headTag>
		<xp:headTag tagName="meta">
			<xp:this.attributes>
				<xp:parameter name="name" value="viewport" />
			</xp:this.attributes>
			<xp:this.attributes>
				<xp:parameter name="content"
					value="width=device-width, initial-scale=1" />
			</xp:this.attributes>
		</xp:headTag>
	</xp:this.resources>

	<script src="categorizedview.js"></script>

	<div class="container-fluid">
		<div class="row">
			<div class="col">
				<button id="view_expandall" type="button" class="btn btn-sm btn-link">Expand all</button>
				<button id="view_collapseall" type="button" class="btn btn-sm btn-link">Collapse all</button>
				<button id="view_reload" type="button" class="btn btn-sm btn-link">Reload</button>
				<br /><br />
				<div id="view"></div>
		    </div>
		</div>
	</div>
	
	<script type="text/javascript">
	<![CDATA[
		let viewTableEl = null;
		let selectedPath = null;
		const viewId = 'fakenames_bycontinent_categorized';
		
		// create the Domino view table
		
		(async function() {
			viewTableEl = await viewBuilder({
				url: 'viewdata.xsp',
				viewid: viewId,
				pageSize: 100,
				cols: [
					{
						id: 'expandstate',
						title: '+/-',
						valueHTML: function(entry, target) {
							if (entry['@iscategory']) {
								if (this.isExpanded(entry['@noteid'])) {
									target.innerHTML = '<i class="bi bi-caret-down-fill"></i>';
								}
								else {
									target.innerHTML = '<i class="bi bi-caret-right-fill"></i>';
								}
							}
						}
					},
					{
						id: '@categoryname',
						title: 'Category',
						value: function(entry) {
							if (entry['@iscategory']) {
								return entry['@categoryvalue'] || '(Not categorized)';
							}
							return '';
						}
					},
					{
						id: 'lastname',
						title: 'Lastname',
						value: function(entry) {
							return entry['lastname'] || '';
						}
					},
					{
						id: 'firstname',
						title: 'Firstname',
						value: function(entry) {
							return entry['firstname'] || '';
						}
					},
				]
			});
			document.getElementById('view').appendChild(viewTableEl);
			
			// autoscroller stuff:
			
			// Function to check if the user has scrolled to the bottom of the page
		    function isAtBottom() {
		        return (window.innerHeight + window.scrollY) >= document.body.offsetHeight - 100;
		    }
		
		    // Debounce function to limit the rate at which the scroll event is processed
		    function debounce(func, wait) {
		        let timeout;
		        return function executedFunction(...args) {
		            const later = () => {
		                clearTimeout(timeout);
		                func(...args);
		            };
		            clearTimeout(timeout);
		            timeout = setTimeout(later, wait);
		        };
		    }
		
		    // Function to load more rows when the user scrolls to the bottom
		    async function loadMoreRowsOnScroll() {
		        if (isAtBottom()) {
		            await viewTableEl.loadMoreRows();
		        }
		    }
		
		    // Add scroll event listener with debounce
		    window.addEventListener('scroll', debounce(loadMoreRowsOnScroll, 200));
    		
    		// button event code:
    		
    		document.getElementById('view_expandall').addEventListener("click", async (e) => {
    			e.preventDefault();
    			if (viewTableEl.expandAll()) {
	    			await viewTableEl.reload();
    			}
    			
    		});
    		document.getElementById('view_collapseall').addEventListener("click", async (e) => {
    			e.preventDefault();
    			if (viewTableEl.collapseAll()) {
    				await viewTableEl.reload();
    			}
    		});
    		document.getElementById('view_reload').addEventListener("click", async (e) => {
    			e.preventDefault();
    			viewTableEl.reload();
    		});
		})();
		]]>
	</script>
</xp:view>
